plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}
group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}
//jaxb is a plugin that enable us to create domain classes automatically.
configurations {
	jaxb
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'wsdl4j:wsdl4j'

	//add the following dependencies solve the problem plus all the dependencies in the jaxb section.
	//	In summary the XJC 2.3 Ant Task appears to not support remote schema.
	//	Until this is fixed, you can either use a local schema file with fork enabled or you could downgrade to the most recent version that works.
	//	That appears to be 2.2.11
	implementation "javax.xml.bind:jaxb-api:2.3.1"
	implementation "org.glassfish.jaxb:jaxb-runtime:2.3.1"
	implementation "jakarta.xml.bind:jakarta.xml.bind-api:3.0.1"
	implementation "com.sun.xml.bind:jaxb-impl:3.0.2"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	jaxb (
		 "com.sun.xml.bind:jaxb-core:2.2.11",
		 "com.sun.xml.bind:jaxb-impl:2.2.11",
			//the version of jaxb-xjc have a problem so to solve that we use 2.2.11
		 "com.sun.xml.bind:jaxb-xjc:2.2.11",
		 "javax.xml.bind:jaxb-api:2.2.11",
		 "javax.activation:activation:1.1"
	)
}

test {
	useJUnitPlatform()
}

//bootjar is used to create the jar file.
bootJar {
	archiveBaseName = 'service'
	archiveVersion =  '0.1.0'
}

//A SourceSet represents a logical group of Java source and resource files.
//Gradle’s Java support was the first to introduce a new concept for building source-based projects: source sets. The main idea is that source files and resources are often logically grouped by type, such as application code, unit tests and integration tests. Each logical group typically has its own sets of file dependencies, classpaths, and more. Significantly, the files that form a source set don’t have to be located in the same directory!
sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			srcDir 'build/generatedsources/jaxb'
		}
	}
}

task genJaxb {
	//where we want to put the generated domain classes
	ext.sourcesDir = "${projectDir}/src/main/java"
	//from which xsd file we want to create the domain classes
	ext.schema = "src/main/resources/countries.xsd"

	outputs.dir sourcesDir

	doLast() {
		project.ant {
			taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
					classpath: configurations.jaxb.asPath
			mkdir(dir: sourcesDir)

			xjc(destdir: sourcesDir, schema: schema) {
				arg(value: "-wsdl")
				produces(dir: sourcesDir, includes: "**/*.java")
			}
		}
	}
}

compileJava.dependsOn genJaxb
